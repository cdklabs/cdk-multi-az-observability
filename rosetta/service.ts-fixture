// Fixture with packages imported, but nothing else
import { Construct } from 'constructs';
import {
  Stack,
  Aws,
  Duration
} from 'aws-cdk-lib';
import {
  CfnNatGateway,
  SelectedSubnets,
  SubnetType,
  Vpc,
} from 'aws-cdk-lib/aws-ec2';
import { ApplicationLoadBalancer, ApplicationTargetGroup } from 'aws-cdk-lib/aws-elasticloadbalancingv2';
import { Stats, Unit } from 'aws-cdk-lib/aws-cloudwatch';
import { ILogGroup, LogGroup } from 'aws-cdk-lib/aws-logs';

import { BasicServiceMultiAZObservability } from '@cdklabs/multi-az-observability';
import { Service } from '@cdklabs/multi-az-observability';
import { InstrumentedServiceMultiAZObservability } from '@cdklabs/multi-az-observability';
import { IOperation } from '@cdklabs/multi-az-observability';
import { IService } from '@cdklabs/multi-az-observability';
import { Operation } from '@cdklabs/multi-az-observability';
import { ApplicationLoadBalancerLatencyOutlierAlgorithm } from '@cdklabs/multi-az-observability';
import { MetricDimensions } from '@cdklabs/multi-az-observability';
import { OperationAvailabilityMetricDetails } from '@cdklabs/multi-az-observability';
import { OperationLatencyMetricDetails } from '@cdklabs/multi-az-observability';
import { ServiceAvailabilityMetricDetails, ServiceLatencyMetricDetails, ContributorInsightRuleDetails } from '@cdklabs/multi-az-observability';

class Fixture extends Stack {
  constructor(scope: Construct, id: string) {
    super(scope, id);
    let stack = scope;
    let azs: string[] = [
      Aws.REGION + 'a',
      Aws.REGION + 'b',
      Aws.REGION + 'c',
    ];

    let vpc = new Vpc(stack, 'vpc', {
      availabilityZones: azs,
      subnetConfiguration: [
        {
          subnetType: SubnetType.PRIVATE_WITH_EGRESS,
          name: 'private_with_egress_subnets',
          cidrMask: 24,
        },
      ],
      createInternetGateway: false,
      natGateways: 0,
      restrictDefaultSecurityGroup: false,
    });

    let subnets: SelectedSubnets = vpc.selectSubnets({
      subnetType: SubnetType.PRIVATE_WITH_EGRESS,
    });

    let natGateway1 = new CfnNatGateway(stack, 'AZ1NatGateway', {
          subnetId: subnets.subnetIds[0],
        });
    let natGateway2 = new CfnNatGateway(stack, 'AZ2NatGateway', {
          subnetId: subnets.subnetIds[1],
        });
    let natGateway3 = new CfnNatGateway(stack, 'AZ3NatGateway', {
          subnetId: subnets.subnetIds[2],
        });


    let loadBalancer = new ApplicationLoadBalancer(stack, 'alb', {
            vpc: vpc,
            crossZoneEnabled: true,
          });


    let targetGroup1: ApplicationTargetGroup = new ApplicationTargetGroup(stack, "tg1", {

  });

  let targetGroup2: ApplicationTargetGroup = new ApplicationTargetGroup(stack, "tg2", {

  });

  let logGroup: ILogGroup = new LogGroup(stack, 'Logs', {});
    
  let service: IService = new Service({
    serviceName: 'test',
    availabilityZoneNames: vpc.availabilityZones,
    baseUrl: 'http://www.example.com',
    faultCountThreshold: 25,
    period: Duration.seconds(60),
    loadBalancer: loadBalancer,
    targetGroups: [ targetGroup1, targetGroup2 ],
    defaultAvailabilityMetricDetails: {
      metricNamespace: 'front-end/metrics',
      successMetricNames: ['Success'],
      faultMetricNames: ['Fault', 'Error'],
      alarmStatistic: 'Sum',
      unit: Unit.COUNT,
      period: Duration.seconds(60),
      evaluationPeriods: 5,
      datapointsToAlarm: 3,
      successAlarmThreshold: 99.9,
      faultAlarmThreshold: 0.1,
      graphedFaultStatistics: ['Sum'],
      graphedSuccessStatistics: ['Sum'],
    },
    defaultLatencyMetricDetails: {
      metricNamespace: 'front-end/metrics',
      successMetricNames: ['SuccessLatency'],
      faultMetricNames: ['FaultLatency'],
      alarmStatistic: 'p99',
      unit: Unit.MILLISECONDS,
      period: Duration.seconds(60),
      evaluationPeriods: 5,
      datapointsToAlarm: 3,
      successAlarmThreshold: Duration.millis(150),
      graphedFaultStatistics: ['p99'],
      graphedSuccessStatistics: ['p50', 'p99', 'tm99'],
    },
    defaultContributorInsightRuleDetails: {
      successLatencyMetricJsonPath: '$.SuccessLatency',
      faultMetricJsonPath: '$.Faults',
      operationNameJsonPath: '$.Operation',
      instanceIdJsonPath: '$.InstanceId',
      availabilityZoneIdJsonPath: '$.AZ-ID',
      logGroups: [logGroup],
    },
    canaryTestProps: {
      requestCount: 10,
      schedule: 'rate(1 minute)',
      loadBalancer: loadBalancer,
      networkConfiguration: {
        vpc: vpc,
        subnetSelection: { subnetType: SubnetType.PRIVATE_ISOLATED },
      },
    },
    minimumUnhealthyTargets: {
        percentage: 0.1
    }
  });
    
  /// here
  }
}